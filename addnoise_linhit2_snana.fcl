# addnoise_findprim_daqsimanas.fcl

# Read in (presumably noise-free) waveforms, add noise and pedestals,
# then find trigger primitives on the (now noisy) waveforms, and save
# the trigger primitives (as "Hits") to an output TTree.

# Any number of trigger primitive finders can be run: useful for
# running the same finder with multiple parameter settings, for
# example. The output of each trigger primitive finder should be
# connected to a DaqSimAna analyzer

#include "SNAna.fcl"
#include "linhit.fcl"
BEGIN_PROLOG
linhit_snana: 
{
   @table::standard_snana
   SaveNeighbourADCs:    false
   SaveTruth:            true

}
END_PROLOG

#include "standard_detsim_dune10kt_1x2x6.fcl"

process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService:          { fileName: "SNAna_plus_trigprim_multithreshold.root" }
services.TimeTracker:           {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
// services.FileCatalogMetadata:@local::art_file_catalog_mc
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:               @local::dune_message_services_prod

#source is now a root file

source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

outputs:
{
  out1: 
  {    
    module_type: RootOutput
    fileName:    "%ifb_detsim_findhit_findclusters.root"
    dataTier:    "triggered"
    compressionLevel: 1
  }
}  


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
   producers: {
      simwire: {
         module_type: "SimWireDUNE"
         SimChannelLabel: "largeant"
         NoiseOn: true
         PedestalOn: true
         DistortOn: false
         SuppressOn: false
         KeepEmptyChannels: true
         AdcSimulator:      "adcsim_ideal"
         UseRawDigitInput: true
         RawDigitInputLabel: "daq"
      }

      # You can add any number of trigger primitive finders here. Make
      # sure each one has a distinct name, and has a corresponding
      # daqsimana analyzer (otherwise you won't get a corresponding
      # TTree in the output file. Also make sure to add it to the "simulate" list below
      linhit1500: @local::linhitalg2
      linhit2000: @local::linhitalg2
      linhit2500: @local::linhitalg2
      linhit3000: @local::linhitalg2

      rns:            { module_type: "RandomNumberSaver" }
   }

   
   analyzers:
   {
      # Create an SNAna for each trigger primitive finders. Make
      # sure to add each one to the "ana" list below
      snanalinhit1500: @local::linhit_snana
      snanalinhit2000: @local::linhit_snana
      snanalinhit2500: @local::linhit_snana
      snanalinhit3000: @local::linhit_snana
      waveformstotree: {
         module_type: "WaveformsToTree"
         InputTag: "simwire"
         MaxChannels: 50
      }
   }


   simulate: [ rns, simwire,  linhit1500, linhit2000, linhit2500, linhit3000 ]
   ana: [ snanalinhit1500, snanalinhit2000, snanalinhit2500, snanalinhit3000, waveformstotree ]

   trigger_paths: [ simulate ] 
   end_paths: [ out1 ] 

}

# Modify the settings of each of the trigger primitive finders. If you
# want to use a different trigger primitive finder class, set
# "physics.producers.<itemname>.finder.tool_type: MyNewTriggerPrimitiveFinderTool"
physics.producers.linhit1500.finder.Threshold: 15
physics.producers.linhit2000.finder.Threshold: 20
physics.producers.linhit2500.finder.Threshold: 25
physics.producers.linhit3000.finder.Threshold: 30

# Set the HitLabel to make sure each DaqAnaSim reads hits from its
#  corresponding TriggerPrimitiveFinder
physics.analyzers.snanalinhit1500.HitLabel: "linhit1500"
physics.analyzers.snanalinhit2000.HitLabel: "linhit2000"
physics.analyzers.snanalinhit2500.HitLabel: "linhit2500"
physics.analyzers.snanalinhit3000.HitLabel: "linhit3000"

# =====================================================================
# You probably won't need to change anything below here

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone
services.AdcCompressService:       @local::cmpreplace
services.DetPedestalService:       @local::dune_fixedpeds
